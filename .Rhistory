plt2 = ggplot(Data, aes(x = x, y = y)) +
geom_point(size = 1) +
geom_hline(yintercept = 0, size = 0.3) +
geom_line(data = Zf1, size = 1, colour = I("blue")) +
geom_line(data = Zf3, size = 1, colour = I("red"), lty = 6) +
xlab("Year") + ylab("Flow (m³/s)") +
ggtitle("B-Spline - Nile River Flow") +
ylim(c(500, 1500)) +
JOPS_theme()
print(plt2)
##### 4 - PENALIZED SPLINES #####
### a - LAMBDAS ###
# Make basis and penalty
nu = 200
u = seq(1870, 1970, length = nu)
nseg = 20
Bu = bbase(u, nseg = nseg)
B = bbase(x, nseg = nseg)
nb = ncol(B)
knots = ((1:nb) - 2) / nseg
n = ncol(B)
D = diff(diag(n), diff = 2)
P = t(D) %*% D
BtB = t(B) %*% B
Bty = t(B) %*% y
# Compute coefficients
A = Mu = NULL
lambdas = c(0.001, 0.1, 5, 10000)
for (lambda in lambdas) {
a = solve(BtB + lambda * P, Bty)
A = cbind(A, a)
}
Z = Bu %*% A
Mu = cbind(Mu, B %*% A)
# Generate the plots
plts = list()
for (j in 1:4) {
# Compute roughness
aj = c(A[, j])
da = D %*% aj
r = sqrt(sum(da ^ 2) / (n - 2))
r = round(r, 2)
# Scaled basis
Bsc = B %*% diag(aj)
# Create data frames for ggplot
Data = data.frame(x, y)
Zf = data.frame(x = u, y = Z[, j], id  = as.factor(1))
Bf = data.frame(x = rep(u, n), y = as.vector(Bsc),
id = as.factor(rep(1:n, each = nu)))
Bf$y[Bf$y < 0.0001] = NA
Bf = na.omit(Bf)
titl = bquote(lambda==.(lambdas[j])~ "|"~r==.(r))
Fa = data.frame(x = knots, y = aj, id = as.factor(1))
# Build the graphs
plt1 = ggplot(Data, aes(x = x, y = y), ylim = c(0, 1.5)) +
geom_point(color = 'black') +
geom_line(data = Zf, aes(x, y), color = "blue", size = 1)  +
xlab("") + ylab("") +
ggtitle(titl) +
JOPS_theme() +
theme(plot.title = element_text(size = rel(0.9)))
# Add to list of plots
plts[[j]] = plt1
}
# Plot and save
grid.arrange(grobs = plts, nrow = 2, ncol = 2)
### b - CV ###
# Basis parameters
nseg = 20
bdeg = 3
pord = 2
# Calculate CV on log grid for lambda
F1 = data.frame(x,y)
llambs = seq(from = -2, to = 0, by = .1)
lambin = 10 ^ llambs
cvs = NULL
for (lambda in lambin) {
fit = psNormal(x,y, nseg = nseg, bdeg = bdeg, pord = pord, lambda = lambda)
cvs = c(cvs, fit$cv)
k = which.min(cvs)
lambdacv = lambin[k]
}
# Fit with the best lambda
fit = psNormal(x, y, nseg = nseg, bdeg = bdeg, pord = pord, lambda = lambdacv)
F2 = data.frame(xg = fit$xgrid, yg = fit$ygrid)
txt2 = bquote(lambda == .(round(lambdacv, 3)) ~'|'~
'CV'==.(round(fit$cv, 1)))
# Plot CV profile
pltcv = ggplot(F1, aes(x = x, y = y)) +
geom_point(data = F1, size = 1.5, color = "black") +
geom_line(aes(x = xg, y = yg), data = F2, size = 1, colour = "blue", lty = 1) +
xlab("Year") + ylab("Flow (m³/s)") +
ggtitle(txt2) +
JOPS_theme()
# Show plots and save pdf
grid.arrange(grobs = plts, ncol = 2, nrow = 3)
### c - AIC ###
m = length(x)
nsegs = c(20, 40)
lambdas = 10 ^ seq(-2, 0, by = 0.1)
M = A = NULL
for (nseg in nsegs) {
# Create basis and penalty matrix
B = bbase(x, nseg = nseg)
n = ncol(B)
D = diff(diag(n), diff = 2)
P = t(D) %*% D
# Compute P-spline Poisson fit
aics = devs = eds = NULL
Mus = NULL
for (lambda in lambdas) {
eta = log(y + 1)
a = rep(0, n)
mon = F
for (it in 1:10) {
mu = exp(eta)
z = y - mu + mu * eta
G = t(B) %*% diag(c(mu)) %*% B
anew = solve(G +  lambda * P, t(B) %*% z)
da = max(abs(anew - a))
if (mon) cat(it, lambda, da, '\n')
a = anew
eta = B %*% a
if (da < 1e-6) break
}
# Save fit and AIC
Mus = cbind(Mus, mu)
H = solve(G + lambda * P, G)
hd = diag(H)
ed = sum(hd)
eds = c(eds, ed)
dev = 2 * sum(y * log(y / mu))
devs = c(devs, dev)
aic = dev + 2 * ed
aics = c(aics, aic)
}
# Select minimum of AIC
k = which.min(aics)
lambdaaic = lambdas[k]
print(lambdaaic)
dev = devs[k]
ed = eds[k]
M = cbind(M, Mus[, k])
A = cbind(A, aics)
cat(nseg, devs[k], eds[k], aics[k], log10(lambdas[k]), '\n')
}
F1 = data.frame(lambdas = lambdas, aic1 = A[, 1], aic2 = A[, 2])
F2 = data.frame(x = x, y = y, mu1 = M[, 1], mu2 = M[, 2])
# Plot cross-validation profile and AIC profile
plt1 = ggplot(data = F3, aes(x = x, y = y)) +
geom_point( size = 1, colour = "blue") +
xlab(expression(paste("log10"(lambda)))) + ylab("CV") +
ggtitle("Cross-validation profile")+
JOPS_theme()
plt2 = ggplot(F1) +
geom_point(aes(x = log10(lambdas), y = aic1), size = 1, color = 'blue') +
ggtitle('AIC profile') +
xlab(expression(paste("log10"(lambda)))) + ylab('AIC') +
JOPS_theme()
grid.arrange(plt1, plt2, nrow = 2, ncol = 1)
# Make basis and penalty
nu = 200
u = seq(1870, 1970, length = nu)
nseg = 20
Bu = bbase(u, nseg = nseg)
B = bbase(x, nseg = nseg)
nb = ncol(B)
knots = ((1:nb) - 2) / nseg
n = ncol(B)
D = diff(diag(n), diff = 2)
P = t(D) %*% D
BtB = t(B) %*% B
Bty = t(B) %*% y
A = Mu = NULL
lambdas = c(lambdacv, lambdaaic)
for (lambda in lambdas) {
a = solve(BtB + lambda * P, Bty)
A = cbind(A, a)
}
Z = Bu %*% A
Mu = cbind(Mu, B %*% A)
# Generate the plots
plts2 = list()
for (j in 1:2) {
# Compute roughness
aj = c(A[, j])
da = D %*% aj
r = sqrt(sum(da ^ 2) / (n - 2))
r = round(r, 2)
# Scaled basis
Bsc = B %*% diag(aj)
# Create data frames for ggplot
Data = data.frame(x, y)
Zf = data.frame(x = u, y = Z[, j], id  = as.factor(1))
Bf = data.frame(x = rep(u, n), y = as.vector(Bsc),
id = as.factor(rep(1:n, each = nu)))
Bf$y[Bf$y < 0.0001] = NA
Bf = na.omit(Bf)
titl = bquote(lambda==.(lambdas[j])~ "|"~r==.(r))
Fa = data.frame(x = knots, y = aj, id = as.factor(1))
# Build the graphs
plt1 = ggplot(Data, aes(x = x, y = y), ylim = c(0, 1.5)) +
geom_point(color = 'black') +
geom_line(data = Zf, aes(x, y), color = "blue", size = 1)  +
xlab("") + ylab("") +
ggtitle(titl) +
JOPS_theme() +
theme(plot.title = element_text(size = rel(0.9)))
# Add to list of plots
plts2[[j]] = plt1
}
# Plot and save
grid.arrange(grobs = plts2, nrow = 2, ncol = 1)
library(readr)
library(ggplot2)
library(gridExtra)
library(colorspace)
library(MASS)
library(JOPS)
nile <- read_csv("Nile.csv")
x = nile$time
y = nile$value
Data = data.frame(x, y)
##### 1 - LINEAR REGRESSION #####
# Linear regression
linear_model <- lm(value ~ time, data = nile)
summary(linear_model)
# Scatterplot with regression line
plot(nile$time, nile$value,
main = "Linear Regression - Nile River Flow",
xlab = "Year",
ylab = "Flow (m³/s)",
pch = 16,
cex = 0.7,
col = "black")
abline(linear_model, col = "red", lwd = 2)
##### 2 - POLYNOMIAL REGRESSION #####
# We create a subset of the data
nile_new <- subset(nile, time <= 1965)
# Plynomial regression (degree 20)
poly_model <- lm(value ~ poly(time, 20), data = nile)
summary(poly_model)
poly_model2 <- lm(value ~ poly(time, 20), data = nile_new)
lines(nile_new$time, predict(poly_model2), col = "black", lwd = 2, lty = 2)
# Scatterplot of data
plot(nile$time, nile$value,
main = "Polynomial Regression - Nile River Flow",
xlab = "Year",
ylab = "Flow (m³/s)",
pch = 16,
col = "black",
cex = 0.7)
# We add the two polynomials lines
lines(nile$time, predict(poly_model), col = "red", lwd = 2, lty = 1)
lines(nile_new$time, predict(poly_model2), col = "blue", lwd = 2, lty = 2)
##### 3 - B-SPLINES #####
# Boundary for the subdomain
thr = 1965
sel = x <= thr
xsel = x[sel]
ysel = y[sel]
# Compute the B-spline basis
deg = 3
xlo = min(x)
xhi = max(x)
ndx = 5
B = bbase(x, xlo, xhi, nseg = ndx, bdeg = deg)
# Basis for fit on grid
ng = 1000
xg = seq(min(x), max(x), length = ng)
Bg = bbase(xg, xlo, xhi, nseg = ndx, bdeg = deg)
# Estimate the coefficients and compute fit on the grid
a = solve(t(B) %*% B, t(B) %*% y)
z1 = Bg %*% a
# Compute the B-spline basis
xlosel = min(xsel)
xhisel = max(xsel)
B = bbase(xsel, xlosel, xhisel, nseg = ndx, bdeg = deg)
# Basis for fit on grid
ng = 1000
xgsel = seq(min(xsel), max(xsel), length = ng)
Bgsel = bbase(xgsel, xlosel, xhisel, nseg = ndx, bdeg = deg)
asel = solve(t(B)  %*% B, t(B) %*% ysel)
zsel = Bgsel %*% asel
# Create data frames for ggplot
Zf1 = data.frame(x = xg, y = z1, id = as.factor(1))
Zf2 = data.frame(x = xg[xg <= thr], y = zsel[xg <= thr], id = as.factor(1))
# Build the graph
plt1 = ggplot(Data, aes(x = x, y = y)) +
geom_point(size = 1) +
geom_hline(yintercept = 0, size = 0.3) +
geom_line(data = Zf1, size = 1, colour = I("blue")) +
geom_line(data = Zf2, size = 1, colour = I("red"), lty = 6) +
xlab("Year") + ylab("Flow (m³/s)") +
ggtitle("B-Spline - Nile River Flow") +
ylim(c(500, 1500)) +
JOPS_theme()
print(plt1)
ndx2 = 30
B2 = bbase(x, xlo, xhi, nseg = ndx2, bdeg = deg)
Bg2 = bbase(xg, xlo, xhi, nseg = ndx2, bdeg = deg)
a2 = solve(t(B2) %*% B2, t(B2) %*% y)
z2 = Bg2 %*% a2
Zf3 = data.frame(x = xg, y = z2, id = as.factor(1))
plt2 = ggplot(Data, aes(x = x, y = y)) +
geom_point(size = 1) +
geom_hline(yintercept = 0, size = 0.3) +
geom_line(data = Zf1, size = 1, colour = I("blue")) +
geom_line(data = Zf3, size = 1, colour = I("red"), lty = 6) +
xlab("Year") + ylab("Flow (m³/s)") +
ggtitle("B-Spline - Nile River Flow") +
ylim(c(500, 1500)) +
JOPS_theme()
print(plt2)
##### 4 - PENALIZED SPLINES #####
### a - LAMBDAS ###
# Make basis and penalty
nu = 200
u = seq(1870, 1970, length = nu)
nseg = 20
Bu = bbase(u, nseg = nseg)
B = bbase(x, nseg = nseg)
nb = ncol(B)
knots = ((1:nb) - 2) / nseg
n = ncol(B)
D = diff(diag(n), diff = 2)
P = t(D) %*% D
BtB = t(B) %*% B
Bty = t(B) %*% y
# Compute coefficients
A = Mu = NULL
lambdas = c(0.001, 0.1, 5, 10000)
for (lambda in lambdas) {
a = solve(BtB + lambda * P, Bty)
A = cbind(A, a)
}
Z = Bu %*% A
Mu = cbind(Mu, B %*% A)
# Generate the plots
plts = list()
for (j in 1:4) {
# Compute roughness
aj = c(A[, j])
da = D %*% aj
r = sqrt(sum(da ^ 2) / (n - 2))
r = round(r, 2)
# Scaled basis
Bsc = B %*% diag(aj)
# Create data frames for ggplot
Data = data.frame(x, y)
Zf = data.frame(x = u, y = Z[, j], id  = as.factor(1))
Bf = data.frame(x = rep(u, n), y = as.vector(Bsc),
id = as.factor(rep(1:n, each = nu)))
Bf$y[Bf$y < 0.0001] = NA
Bf = na.omit(Bf)
titl = bquote(lambda==.(lambdas[j])~ "|"~r==.(r))
Fa = data.frame(x = knots, y = aj, id = as.factor(1))
# Build the graphs
plt1 = ggplot(Data, aes(x = x, y = y), ylim = c(0, 1.5)) +
geom_point(color = 'black') +
geom_line(data = Zf, aes(x, y), color = "blue", size = 1)  +
xlab("") + ylab("") +
ggtitle(titl) +
JOPS_theme() +
theme(plot.title = element_text(size = rel(0.9)))
# Add to list of plots
plts[[j]] = plt1
}
# Plot and save
grid.arrange(grobs = plts, nrow = 2, ncol = 2)
### b - CV ###
# Basis parameters
nseg = 20
bdeg = 3
pord = 2
# Calculate CV on log grid for lambda
F1 = data.frame(x,y)
llambs = seq(from = -2, to = 0, by = .1)
lambin = 10 ^ llambs
cvs = NULL
for (lambda in lambin) {
fit = psNormal(x,y, nseg = nseg, bdeg = bdeg, pord = pord, lambda = lambda)
cvs = c(cvs, fit$cv)
k = which.min(cvs)
lambdacv = lambin[k]
}
# Plot CV profile
pltcv = ggplot(F1, aes(x = x, y = y)) +
geom_point(data = F1, size = 1.5, color = "black") +
geom_line(aes(x = xg, y = yg), data = F2, size = 1, colour = "blue", lty = 1) +
xlab("Year") + ylab("Flow (m³/s)") +
ggtitle(txt2) +
JOPS_theme()
# Show plots and save pdf
grid.arrange(grobs = plts, ncol = 2, nrow = 3)
### c - AIC ###
m = length(x)
nsegs = c(20, 40)
lambdas = 10 ^ seq(-2, 0, by = 0.1)
M = A = NULL
for (nseg in nsegs) {
# Create basis and penalty matrix
B = bbase(x, nseg = nseg)
n = ncol(B)
D = diff(diag(n), diff = 2)
P = t(D) %*% D
# Compute P-spline Poisson fit
aics = devs = eds = NULL
Mus = NULL
for (lambda in lambdas) {
eta = log(y + 1)
a = rep(0, n)
mon = F
for (it in 1:10) {
mu = exp(eta)
z = y - mu + mu * eta
G = t(B) %*% diag(c(mu)) %*% B
anew = solve(G +  lambda * P, t(B) %*% z)
da = max(abs(anew - a))
if (mon) cat(it, lambda, da, '\n')
a = anew
eta = B %*% a
if (da < 1e-6) break
}
# Save fit and AIC
Mus = cbind(Mus, mu)
H = solve(G + lambda * P, G)
hd = diag(H)
ed = sum(hd)
eds = c(eds, ed)
dev = 2 * sum(y * log(y / mu))
devs = c(devs, dev)
aic = dev + 2 * ed
aics = c(aics, aic)
}
# Select minimum of AIC
k = which.min(aics)
lambdaaic = lambdas[k]
print(lambdaaic)
dev = devs[k]
ed = eds[k]
M = cbind(M, Mus[, k])
A = cbind(A, aics)
cat(nseg, devs[k], eds[k], aics[k], log10(lambdas[k]), '\n')
}
F1 = data.frame(lambdas = lambdas, aic1 = A[, 1], aic2 = A[, 2])
F2 = data.frame(x = x, y = y, mu1 = M[, 1], mu2 = M[, 2])
# Plot cross-validation profile and AIC profile
plt1 = ggplot(data = F3, aes(x = x, y = y)) +
geom_point( size = 1, colour = "blue") +
xlab(expression(paste("log10"(lambda)))) + ylab("CV") +
ggtitle("Cross-validation profile")+
JOPS_theme()
plt2 = ggplot(F1) +
geom_point(aes(x = log10(lambdas), y = aic1), size = 1, color = 'blue') +
ggtitle('AIC profile') +
xlab(expression(paste("log10"(lambda)))) + ylab('AIC') +
JOPS_theme()
grid.arrange(plt1, plt2, nrow = 2, ncol = 1)
# Make basis and penalty
nu = 200
u = seq(1870, 1970, length = nu)
nseg = 20
Bu = bbase(u, nseg = nseg)
B = bbase(x, nseg = nseg)
nb = ncol(B)
knots = ((1:nb) - 2) / nseg
n = ncol(B)
D = diff(diag(n), diff = 2)
P = t(D) %*% D
BtB = t(B) %*% B
Bty = t(B) %*% y
A = Mu = NULL
lambdas = c(lambdacv, lambdaaic)
for (lambda in lambdas) {
a = solve(BtB + lambda * P, Bty)
A = cbind(A, a)
}
Z = Bu %*% A
Mu = cbind(Mu, B %*% A)
# Generate the plots
plts2 = list()
for (j in 1:2) {
# Compute roughness
aj = c(A[, j])
da = D %*% aj
r = sqrt(sum(da ^ 2) / (n - 2))
r = round(r, 2)
# Scaled basis
Bsc = B %*% diag(aj)
# Create data frames for ggplot
Data = data.frame(x, y)
Zf = data.frame(x = u, y = Z[, j], id  = as.factor(1))
Bf = data.frame(x = rep(u, n), y = as.vector(Bsc),
id = as.factor(rep(1:n, each = nu)))
Bf$y[Bf$y < 0.0001] = NA
Bf = na.omit(Bf)
titl = bquote(lambda==.(lambdas[j])~ "|"~r==.(r))
Fa = data.frame(x = knots, y = aj, id = as.factor(1))
# Build the graphs
plt1 = ggplot(Data, aes(x = x, y = y), ylim = c(0, 1.5)) +
geom_point(color = 'black') +
geom_line(data = Zf, aes(x, y), color = "blue", size = 1)  +
xlab("") + ylab("") +
ggtitle(titl) +
JOPS_theme() +
theme(plot.title = element_text(size = rel(0.9)))
# Add to list of plots
plts2[[j]] = plt1
}
# Plot and save
grid.arrange(grobs = plts2, nrow = 2, ncol = 1)
